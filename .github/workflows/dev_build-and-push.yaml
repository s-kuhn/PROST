name: Build and Tag Docker Image

on:
  pull_request:
    branches:
      - dev
    types: [closed]

concurrency:
  group: "dev-build-and-tag-${{ github.event.pull_request.number || github.ref }}"
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changed-files.outputs.backend_any_changed }}
      frontend: ${{ steps.changed-files.outputs.frontend_any_changed }}
    if: github.event.pull_request.merged == true
    steps:
      - uses: actions/checkout@v4
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files_yaml: |
            backend:
              - 'server/**'
            frontend:
              - 'frontend/**'

  build-and-tag-backend:
    environment: dev
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read Version from POM
        id: get_version
        run: |
          version=$(mvn -f server/pom.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          echo "Current version from POM: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag -a "v${{ steps.get_version.outputs.version }}" -m "Version ${{ steps.get_version.outputs.version }} from PR #${{ github.event.pull_request.number }}"
          git push origin "v${{ steps.get_version.outputs.version }}"

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Build and push backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/prost_backend_dev:${{ steps.get_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/prost_backend_dev:latest-dev

  # Build und Tag fÃ¼r Frontend
  build-and-tag-frontend:
    environment: dev
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from package.json
        id: get_version
        run: |
          version=$(jq -r '.version' frontend/prost-frontend/package.json)
          echo "Current version from package.json: $version"
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend/prost-frontend
          file: ./frontend/prost-frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/prost_frontend_dev:${{ steps.get_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/prost_frontend_dev:latest-dev
          build-args: |
            BUILD_CONFIGURATION=dev

  deploy-dev:
    environment: dev
    needs: [build-and-tag-backend, build-and-tag-frontend]
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (needs.build-and-tag-backend.result == 'success' || needs.build-and-tag-frontend.result == 'success')
    env:
      VERSION_TAG_BACKEND: ${{ needs.build-and-tag-backend.outputs.version }}
      VERSION_TAG_FRONTEND: ${{ needs.build-and-tag-frontend.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Copy Docker Files to Server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          port: 22
          source: "docker/docker-compose.dev.yaml, docker/Dockerfile.keycloak, docker/keycloak/"
          target: ${{ secrets.DEPLOY_SERVER_PATH }}/docker
          strip_components: 1
          overwrite: true
      - name: Copy needed Files to Server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          port: 22
          source: "keycloak-webhook-event-listener/"
          target: ${{ secrets.DEPLOY_SERVER_PATH }}/keycloak-webhook-event-listener
          strip_components: 1
          overwrite: true

      - name: Log in to the Container registry
        run: |
          export CR_PAT=${{ secrets.GHCR_TOKEN }}
          echo $CR_PAT | docker login ghcr.io -u ${{ secrets.GH_REPOSITORY_OWNER }} --password-stdin

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          port: 22
          script: |
            export PATH=$PATH:/snap/bin
            cd ${{ secrets.DEPLOY_SERVER_PATH }}
            docker image prune -a --force
            cat > docker/.env <<EOF
            VERSION_TAG_BACKEND=${{ env.VERSION_TAG_BACKEND }}
            VERSION_TAG_FRONTEND=${{ env.VERSION_TAG_FRONTEND }}
            GH_REPOSITORY_OWNER=${{ secrets.GH_REPOSITORY_OWNER }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }}
            KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}
            KC_BOOTSTRAP_ADMIN_USERNAME=${{ secrets.KC_BOOTSTRAP_ADMIN_USERNAME }}
            KC_BOOTSTRAP_ADMIN_PASSWORD=${{ secrets.KC_BOOTSTRAP_ADMIN_PASSWORD }}
            KEYCLOAK_HOSTNAME=${{ secrets.KEYCLOAK_HOSTNAME }}
            BACKEND_HOSTNAME=${{ secrets.BACKEND_HOSTNAME }}
            KEYCLOAK_EVENT_LISTENER_SECRET=${{ secrets.KEYCLOAK_EVENT_LISTENER_SECRET }}
            FRONTEND_HOSTNAME=${{ secrets.FRONTEND_HOSTNAME }}
            EOF
            docker compose -f docker/docker-compose.dev.yaml -p "dev_prost" --env-file docker/.env up --build -d --remove-orphans
