name: Build and Tag Docker Image

on:
  pull_request:
    branches:
      - dev
    types: [closed]

jobs:
  build-and-tag:
    environment: dev
    runs-on: ubuntu-latest
    outputs:
      next_version: ${{ steps.versioning.outputs.next_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate GH
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Install semver
        run: npm install -g semver

      - name: Determine Version
        id: versioning
        run: |
          git fetch --tags
          current_version=$(git tag -l | sort -V | tail -n 1)
          if [ -z "$current_version" ]; then
            current_version="0.0.0"
          fi
          echo "Current version: $current_version"
          
          pr_number=${{ github.event.pull_request.number }}
      
          labels_json=$(gh api \
          repos/${{ github.repository }}/issues/$pr_number/labels \
          --jq '.')
          
          if [ "$labels_json" == "[]" ]; then
            echo "Failed to fetch labels for PR #$pr_number."
            exit 1
          fi
      
          echo "Labels JSON from GH API: $labels_json"
      
          labels=$(echo "$labels_json" | jq -r '.[].name')
      
          if [ -z "$labels" ]; then
            echo "No labels or not JSON parseable."
            exit 1
          fi
      
          bump=""
            for label in $labels; do
              case "$label" in
                "breaking-changes") bump="major" ;;
                "feature")          bump="minor" ;;
                "bugfix")           bump="patch" ;;
            esac
          done

          if [[ -z "$bump" ]]; then
            echo "No valid label found for version bump."
            exit 1
          fi
          next_version=$(npx semver $current_version -i $bump)
          echo "Next version: $next_version"
          echo "next_version=$next_version" >> $GITHUB_ENV
          echo "next_version=$next_version" >> $GITHUB_OUTPUT

      - name: Update Maven Version
        run: mvn -ntp versions:set -DnewVersion=$next_version -f server/pom.xml || exit 1

      - name: Commit and Push Updated pom.xml
        run: |
          git fetch origin dev
          git checkout dev
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add server/pom.xml
          git commit -m "Set version to $next_version for PR #${{ github.event.pull_request.number }}"
          git push origin dev
          
      - name: Create and Push Git Tag
        run: |
          git tag -a ${{ env.next_version }} -m "Version ${{ env.next_version }}"
          git push origin ${{ env.next_version }}

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/prost_backend_dev:${{ env.next_version }}

  deploy-dev:
    environment: dev
    needs: build-and-tag
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}
    env:
      VERSION_TAG: ${{ needs.build-and-tag.outputs.next_version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Copy Compose Files to Server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          port: 22
          source: docker/docker-compose.dev.yaml
          target: ${{ secrets.DEPLOY_SERVER_PATH }}
          strip_components: 1
          overwrite: true
      
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          port: 22
          script: |
            cd ${{ secrets.DEPLOY_SERVER_PATH }}
            docker image prune -a --force
            cat > .env <<EOF
            VERSION_TAG=$VERSION_TAG
            GH_REPOSITORY_OWNER=${{ secrets.GH_REPOSITORY_OWNER }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }}
            KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}
            KC_BOOTSTRAP_ADMIN_USERNAME=${{ secrets.KC_BOOTSTRAP_ADMIN_USERNAME }}
            KC_BOOTSTRAP_ADMIN_PASSWORD=${{ secrets.KC_BOOTSTRAP_ADMIN_PASSWORD }}
            KEYCLOAK_HOSTNAME=${{ secrets.KEYCLOAK_HOSTNAME }}
            BACKEND_HOSTNAME=${{ secrets.BACKEND_HOSTNAME }}
            KEYCLOAK_EVENT_LISTENER_SECRET=${{ secrets.KEYCLOAK_EVENT_LISTENER_SECRET }}
            EOF
            docker compose -f docker-compose.prod.yaml --env-file .env pull
            docker compose -f docker-compose.prod.yaml --env-file .env up -d --remove-orphans
