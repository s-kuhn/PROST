name: Synchronize main with dev

on:
  pull_request:
    branches:
      - main
    types: [closed]

concurrency:
  group: "snyc-main-with-dev-${{ github.event.pull_request.number || github.ref }}"
  cancel-in-progress: true

jobs:
  sync-main:
    environment: prod
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version for production
        id: get_version
        run: |
          git fetch origin dev --tags
          # Try to get latest tag, fallback to "latest" if no tags exist
          latest_version=$(git tag -l "v*" | sort -V | tail -n 1 | sed 's/^v//' || echo "latest")
          if [ -z "$latest_version" ] || [ "$latest_version" = "latest" ]; then
            echo "No version tags found, using 'latest'"
            version_tag="latest"
          else
            echo "Found latest version: $latest_version"
            version_tag="$latest_version"
          fi
          echo "version=$version_tag" >> $GITHUB_OUTPUT
          echo "Will deploy with version: $version_tag"

      - name: Login to GitHub container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Build and push Backend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/prost_backend:${{ steps.get_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/prost_backend:latest

      - name: Build and push Frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend/prost-frontend
          file: ./frontend/prost-frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/prost_frontend:${{ steps.get_version.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/prost_frontend:latest
          build-args: |
            BUILD_CONFIGURATION=prod

  deploy-prod:
    environment: prod
    needs: sync-main
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.merged == true }}

    steps:
      - name: Log deployment info
        run: |
          echo "Deploying production with version: ${{ needs.sync-main.outputs.version_tag }}"

      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Copy Docker Files to Server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          port: 22
          source: "docker/docker-compose.prod.yaml, docker/Dockerfile.keycloak, docker/keycloak/"
          target: ${{ secrets.DEPLOY_SERVER_PATH }}/docker
          strip_components: 1
          overwrite: true
      - name: Copy needed Files to Server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          port: 22
          source: "keycloak-webhook-event-listener/"
          target: ${{ secrets.DEPLOY_SERVER_PATH }}/keycloak-webhook-event-listener
          strip_components: 1
          overwrite: true

      - name: Log in to the Container registry
        run: |
          export CR_PAT=${{ secrets.GHCR_TOKEN }}
          echo $CR_PAT | docker login ghcr.io -u ${{ secrets.GH_REPOSITORY_OWNER }} --password-stdin

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SERVER_SSH_KEY }}
          port: 22
          script: |
            export PATH=$PATH:/snap/bin
            cd ${{ secrets.DEPLOY_SERVER_PATH }}
            docker image prune -a --force
            cat > docker/.env <<EOF
            VERSION_TAG=${{ needs.sync-main.outputs.version_tag }}
            GH_REPOSITORY_OWNER=${{ secrets.GH_REPOSITORY_OWNER }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
            KEYCLOAK_CLIENT_ID=${{ secrets.KEYCLOAK_CLIENT_ID }}
            KEYCLOAK_CLIENT_SECRET=${{ secrets.KEYCLOAK_CLIENT_SECRET }}
            KC_BOOTSTRAP_ADMIN_USERNAME=${{ secrets.KC_BOOTSTRAP_ADMIN_USERNAME }}
            KC_BOOTSTRAP_ADMIN_PASSWORD=${{ secrets.KC_BOOTSTRAP_ADMIN_PASSWORD }}
            KEYCLOAK_HOSTNAME=${{ secrets.KEYCLOAK_HOSTNAME }}
            BACKEND_HOSTNAME=${{ secrets.BACKEND_HOSTNAME }}
            KEYCLOAK_EVENT_LISTENER_SECRET=${{ secrets.KEYCLOAK_EVENT_LISTENER_SECRET }}
            FRONTEND_HOSTNAME=${{ secrets.FRONTEND_HOSTNAME }}
            EOF
            docker compose -f docker/docker-compose.prod.yaml -p "prod_prost" --env-file docker/.env up --build -d --remove-orphans
