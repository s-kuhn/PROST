x-database-env: &database_env
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}

x-db-healthcheck: &db_healthcheck
  test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
  interval: 5s
  timeout: 5s
  retries: 5

x-keycloak-env: &keycloak_env
  # Admin account
  KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME}
  KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD}
  # Database connection
  KC_DB: postgres
  KC_DB_URL_HOST: database
  KC_DB_URL_DATABASE: ${POSTGRES_DB}
  KC_DB_URL_PORT: ${POSTGRES_PORT}
  KC_DB_USERNAME: ${POSTGRES_USER}
  KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
  # Keycloak settings
  KC_SPI_SCRIPT_UPLOAD_ENABLED: true
  KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
  KC_HOSTNAME_STRICT: "false"
  # Variables for the event listener provider
  BACKEND_HOSTNAME: ${BACKEND_HOSTNAME}
  KEYCLOAK_HOSTNAME: ${KEYCLOAK_HOSTNAME}
  KEYCLOAK_EVENT_LISTENER_SECRET: ${KEYCLOAK_EVENT_LISTENER_SECRET}

x-backend-env: &backend_env
  # Database connection
  POSTGRES_HOST: ${POSTGRES_HOST}
  POSTGRES_PORT: ${POSTGRES_PORT}
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  # Keycloak settings
  KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
  KEYCLOAK_CLIENT_SECRET: ${KEYCLOAK_CLIENT_SECRET}
  KEYCLOAK_HOSTNAME: ${KEYCLOAK_HOSTNAME}

x-frontend-env: &frontend_env
  API_URL: /api
  KEYCLOAK_URL: /auth
  KEYCLOAK_REALM: ${KEYCLOAK_REALM:-prost}
  KEYCLOAK_CLIENT_ID: prost-frontend

services:
  database:
    image: postgres:17.5
    container_name: dev_prost_database
    environment:
      <<: *database_env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - prost-vnet
    restart: unless-stopped
    healthcheck: *db_healthcheck
    volumes:
      - postgres-data:/var/lib/postgresql/data

  keycloak:
    build:
      context: ..
      dockerfile: docker/Dockerfile.keycloak
    image: ghcr.io/${GH_REPOSITORY_OWNER}/prost_keycloak:0.0.1
    container_name: dev_prost_keycloak
    command: >
      start-dev 
        --http-port=8081 
        --verbose 
        --import-realm 
        --file=/opt/keycloak/data/import/prost-realm.json
    environment:
      <<: *keycloak_env
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    depends_on:
      database:
        condition: service_healthy
    networks:
      - prost-vnet
#    ports:
#      - "8081:8081"
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog
    container_name: dev_mailhog
#    ports:
#      - "1025:1025"
#      - "8025:8025"
    networks:
      - prost-vnet
    restart: unless-stopped

  backend:
    image: ghcr.io/${GH_REPOSITORY_OWNER}/prost_backend_dev:${VERSION_TAG_BACKEND}
    container_name: dev_prost_backend
    environment:
      SPRING_PROFILES_ACTIVE: dev
      <<: *backend_env
#    ports:
#      - "443:8080"
    networks:
      - prost-vnet
    depends_on:
      database:
        condition: service_healthy
      keycloak:
        condition: service_started
    restart: unless-stopped

  frontend:
    image: ghcr.io/${GH_REPOSITORY_OWNER}/prost_frontend_dev:${VERSION_TAG_FRONTEND}
    container_name: dev_prost_frontend
    environment:
      <<: *frontend_env
    networks:
      - prost-vnet
      - frontend
    depends_on:
      - backend
      - keycloak
    restart: unless-stopped
    labels:
      - traefik.enable=true
      - traefik.http.routers.prost-dev-frontend.tls=true
      - traefik.http.routers.prost-dev-frontend.tls.certresolver=cloudflare
      - traefik.http.routers.prost-dev-frontend.rule=Host(`dev.prost.home.s-kuhn.de`)
      - traefik.http.routers.prost-dev-frontend.entrypoints=websecure

networks:
  prost-vnet:
  frontend:
    external: true

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: ./data/db-dev
      o: bind
