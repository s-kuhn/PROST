x-database-env: &database_env
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}

x-db-healthcheck: &db_healthcheck
  test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
  interval: 5s
  timeout: 5s
  retries: 5

x-keycloak-env: &keycloak_env
  # Admin account
  KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME}
  KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD}
  # Database connection
  KC_DB: postgres
  KC_DB_URL_HOST: database
  KC_DB_URL_DATABASE: ${POSTGRES_DB}
  KC_DB_URL_PORT: ${POSTGRES_PORT}
  KC_DB_USERNAME: ${POSTGRES_USER}
  KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
  # Keycloak settings
  KC_SPI_SCRIPT_UPLOAD_ENABLED: true
  KC_HTTP_PORT: 8081
  KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
  KC_HOSTNAME_STRICT: "false"
  # Variables for the event listener provider
  BACKEND_HOSTNAME: ${BACKEND_HOSTNAME}
  KEYCLOAK_HOSTNAME: ${KEYCLOAK_HOSTNAME}
  KEYCLOAK_EVENT_LISTENER_SECRET: ${KEYCLOAK_EVENT_LISTENER_SECRET}

services:
  database:
    image: postgres:latest
    container_name: prost_database
    environment:
      <<: *database_env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - prost-vnet
    restart: unless-stopped
    healthcheck: *db_healthcheck
    volumes:
      - postgres-data:/var/lib/postgresql/data

  keycloak:
    build:
      context: .
      dockerfile: Dockerfile.keycloak
    container_name: keycloak
    command: start-dev --verbose --import-realm --file=/opt/keycloak/data/import/prost-realm.json
    environment:
      <<: *keycloak_env
    volumes:
      - ./keycloak/realm:/opt/keycloak/data/import
    depends_on:
      database:
        condition: service_healthy
    networks:
      - prost-vnet
    ports:
      - "8081:8081"
    restart: unless-stopped

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - prost-vnet
    restart: unless-stopped

networks:
  prost-vnet:
    driver: bridge

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: ./data/db
      o: bind
